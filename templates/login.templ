package templates

import (

)

type LoginData struct {
	Cip string
}

templ LoginTempl(data LoginData) {
		
	<html lang="es">
		<head>
			<link rel="stylesheet" href="/static/styles.css"/>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>Login</title>
			<script src="https://unpkg.com/htmx.org@2.0.3"></script>			
		</head>
		<body>
			<nav class="navbar">
				<div class="navbar-logo">
					<a href="#">OneVote</a>
				</div>
				<div class="navbar-links">
					<a href="/candidates">Candidatos</a>
				</div>
			</nav>
			<div class="container">
				<div class="login-section">
					<div class="login-form">
						<h2>Login</h2>
						<form hx-post="/login" hx-target="#login-result" hx-swap="innerHTML" hx-trigger="submit">
							<div class="form-group">
								<label for="cip">CIP:</label>																
								<input type="text" id="cip" name="cip" value={ data.Cip } required/>
							</div>
							<!--
							<div class="form-group">
								<label for="cip">CIP</label>
								<input type="text" id="cip" name="cip" value={ data.Cip } required/>
							</div>
							
							<div class="form-group">
								<label for="password">Password</label>
								<input type="password" id="password" name="password" required/>
							</div>
							<button class="btn" type="submit">Login</button>
							-->
							<button type="button" onclick="startCamera()">Activar Cámara</button>
							<button type="button" onclick="captureImage()">Capturar Imagen</button>
							<div id="camera-feed" alt="Vista de la cámara en tiempo real"></div>

							<!-- Campo oculto para almacenar la imagen en base64 -->
							<input type="hidden" id="captured-image" name="captured-image"/>							
							
							<!-- Contenedor para la vista previa de la imagen -->
							<div id="preview">
								<p>Imagen capturada:</p>
								<img id="captured-preview" src="" alt="Vista previa de la imagen capturada" style="display:none; width: 300px"/>
							</div>
							
							<button class="btn" type="button" onclick="submitLogin()">Login</button>
						</form>						
						<div id="login-result"></div>
					</div>
				</div>
			</div>
			<script>
				let video;
				function startCamera() {
					video = document.createElement('video');
					video.setAttribute("id", "video-element");
					document.getElementById('camera-feed').appendChild(video);
					navigator.mediaDevices.getUserMedia({ video: true })
							.then(stream => video.srcObject = stream);
					video.play();					
				}

				function captureImage() {
					const canvas = document.createElement('canvas');
					canvas.width = video.videoWidth;
					canvas.height = video.videoHeight;
					canvas.getContext('2d').drawImage(video, 0, 0);
					
					//Convertir la imagen a base64 y almacenar en el campo oculto
					const dataURL = canvas.toDataURL('image/png');
					document.getElementById('captured-image').value = dataURL.split(',')[1];					
					
					//Mostrar la imagen en el contenedor de vista previa
					const imgPreview = document.getElementById('captured-preview');
					imgPreview.src = dataURL;
					imgPreview.style.display = 'block';

					//Detener la camara
					video.pause();
					video.srcObject.getTracks().forEach(track => track.stop());
					document.getElementById('video-element').remove();
				}

				/*function CIP_to_Nombre(string cip) {
					nombre = 'Desconocido'
					if(cip=='12345') {
						nombre = 'Pablo'
					}
					return nombre
				}*/

				async function submitLogin() {
					//const cip = document.getElementById('cip').value;					
					//const cip = 'Foto' + CIP_to_Nombre(document.getElementById('cip').value) + '.jpg';
					const capturedImage = document.getElementById('captured-image').value;
					const cip = 'FotoPablo.jpg'

					console.log("cip: ", cip);
					console.log("captured-image: ", capturedImage);
					
					//Crear un objeto FormData para enviar los datos en formato form-data
					const formData = new FormData();
					formData.append('cip', cip);
					formData.append('captured-image', capturedImage);													

					// Enviar los datos al servidor usando fetch
					try {
						const response = await fetch('http://127.0.0.1:5000/login', {
							//mode: "no-cors",
							method: 'POST',
							body: formData //Se envia formData en lugar de JSON							
							/*
							headers: {
								'Content-Type': 'application/json',
							},
							body: JSON.stringify({
								cip: cip,
								captured-image: capturedImage
							}),
							*/
						});

						if(!response.ok) {
							throw new Error('Network response was not ok');
						}

						const result = await response.json();
						
						// Mostrar el resultado en el contenedor de login-result
						document.getElementById('login-result').innerHTML = result.mensaje + " --> " + result.autenticado;
					} catch (error) {
						console.error('Error en el login:', error);
						document.getElementById('login-result').innerHTML = "Error al intentar autenticar.";
					}

				}
			</script>	
		</body>
	</html>
}