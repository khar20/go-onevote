// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.793
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import ()

type LoginData struct {
	Cip string
}

func LoginTempl(data LoginData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<html lang=\"es\"><head><link rel=\"stylesheet\" href=\"/static/styles.css\"><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Login</title><script src=\"https://unpkg.com/htmx.org@2.0.3\"></script></head><body><nav class=\"navbar\"><div class=\"navbar-logo\"><a href=\"#\">OneVote</a></div><div class=\"navbar-links\"><a href=\"/candidates\">Candidatos</a></div></nav><div class=\"container\"><div class=\"login-section\"><div class=\"login-form\"><h2>Login</h2><form hx-post=\"/login\" hx-target=\"#login-result\" hx-swap=\"innerHTML\" hx-trigger=\"submit\"><div class=\"form-group\"><label for=\"cip\">CIP:</label> <input type=\"text\" id=\"cip\" name=\"cip\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(data.Cip)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/login.templ`, Line: 37, Col: 63}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" required></div><!--\r\n\t\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t\t<label for=\"cip\">CIP</label>\r\n\t\t\t\t\t\t\t\t<input type=\"text\" id=\"cip\" name=\"cip\" value={ data.Cip } required/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t\t<label for=\"password\">Password</label>\r\n\t\t\t\t\t\t\t\t<input type=\"password\" id=\"password\" name=\"password\" required/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<button class=\"btn\" type=\"submit\">Login</button>\r\n\t\t\t\t\t\t\t--><button type=\"button\" onclick=\"startCamera()\">Activar Cámara</button> <button type=\"button\" onclick=\"captureImage()\">Capturar Imagen</button><div id=\"camera-feed\" alt=\"Vista de la cámara en tiempo real\"></div><!-- Campo oculto para almacenar la imagen en base64 --><input type=\"hidden\" id=\"captured-image\" name=\"captured-image\"><!-- Contenedor para la vista previa de la imagen --><div id=\"preview\"><p>Imagen capturada:</p><img id=\"captured-preview\" src=\"\" alt=\"Vista previa de la imagen capturada\" style=\"display:none; width: 300px\"></div><button class=\"btn\" type=\"button\" onclick=\"submitLogin()\">Login</button></form><div id=\"login-result\"></div></div></div></div><script>\r\n\t\t\t\tlet video;\r\n\t\t\t\tfunction startCamera() {\r\n\t\t\t\t\tvideo = document.createElement('video');\r\n\t\t\t\t\tvideo.setAttribute(\"id\", \"video-element\");\r\n\t\t\t\t\tdocument.getElementById('camera-feed').appendChild(video);\r\n\t\t\t\t\tnavigator.mediaDevices.getUserMedia({ video: true })\r\n\t\t\t\t\t\t\t.then(stream => video.srcObject = stream);\r\n\t\t\t\t\tvideo.play();\t\t\t\t\t\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction captureImage() {\r\n\t\t\t\t\tconst canvas = document.createElement('canvas');\r\n\t\t\t\t\tcanvas.width = video.videoWidth;\r\n\t\t\t\t\tcanvas.height = video.videoHeight;\r\n\t\t\t\t\tcanvas.getContext('2d').drawImage(video, 0, 0);\r\n\t\t\t\t\t\r\n\t\t\t\t\t//Convertir la imagen a base64 y almacenar en el campo oculto\r\n\t\t\t\t\tconst dataURL = canvas.toDataURL('image/png');\r\n\t\t\t\t\tdocument.getElementById('captured-image').value = dataURL.split(',')[1];\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t//Mostrar la imagen en el contenedor de vista previa\r\n\t\t\t\t\tconst imgPreview = document.getElementById('captured-preview');\r\n\t\t\t\t\timgPreview.src = dataURL;\r\n\t\t\t\t\timgPreview.style.display = 'block';\r\n\r\n\t\t\t\t\t//Detener la camara\r\n\t\t\t\t\tvideo.pause();\r\n\t\t\t\t\tvideo.srcObject.getTracks().forEach(track => track.stop());\r\n\t\t\t\t\tdocument.getElementById('video-element').remove();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/*function CIP_to_Nombre(string cip) {\r\n\t\t\t\t\tnombre = 'Desconocido'\r\n\t\t\t\t\tif(cip=='12345') {\r\n\t\t\t\t\t\tnombre = 'Pablo'\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn nombre\r\n\t\t\t\t}*/\r\n\r\n\t\t\t\tasync function submitLogin() {\r\n\t\t\t\t\t//const cip = document.getElementById('cip').value;\t\t\t\t\t\r\n\t\t\t\t\t//const cip = 'Foto' + CIP_to_Nombre(document.getElementById('cip').value) + '.jpg';\r\n\t\t\t\t\tconst capturedImage = document.getElementById('captured-image').value;\r\n\t\t\t\t\tconst cip = 'FotoPablo.jpg'\r\n\r\n\t\t\t\t\tconsole.log(\"cip: \", cip);\r\n\t\t\t\t\tconsole.log(\"captured-image: \", capturedImage);\r\n\t\t\t\t\t\r\n\t\t\t\t\t//Crear un objeto FormData para enviar los datos en formato form-data\r\n\t\t\t\t\tconst formData = new FormData();\r\n\t\t\t\t\tformData.append('cip', cip);\r\n\t\t\t\t\tformData.append('captured-image', capturedImage);\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\r\n\t\t\t\t\t// Enviar los datos al servidor usando fetch\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tconst response = await fetch('http://127.0.0.1:5000/login', {\r\n\t\t\t\t\t\t\t//mode: \"no-cors\",\r\n\t\t\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\t\t\tbody: formData //Se envia formData en lugar de JSON\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\t\t\t\tcip: cip,\r\n\t\t\t\t\t\t\t\tcaptured-image: capturedImage\r\n\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t*/\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tif(!response.ok) {\r\n\t\t\t\t\t\t\tthrow new Error('Network response was not ok');\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tconst result = await response.json();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// Mostrar el resultado en el contenedor de login-result\r\n\t\t\t\t\t\tdocument.getElementById('login-result').innerHTML = result.mensaje + \" --> \" + result.autenticado;\r\n\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\tconsole.error('Error en el login:', error);\r\n\t\t\t\t\t\tdocument.getElementById('login-result').innerHTML = \"Error al intentar autenticar.\";\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t</script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
